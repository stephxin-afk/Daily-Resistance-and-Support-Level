name: Daily Report + Pages Deploy

on:
  schedule:
    - cron: "0 3 * * 1-5"   # 工作日每天 UTC 03:00 运行（按需改）
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Run report
        env:
          FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}       # 可选，用于自动 peers
          WECHAT_SCT_SENDKEY: ${{ secrets.WECHAT_SCT_SENDKEY }} # 可选，微信推送
          PUSHPLUS_TOKEN: ${{ secrets.PUSHPLUS_TOKEN }}         # 可选，PushPlus
          # 下面两个不是必须；若设置了会写入通知与 HTML 里的链接
          REPORT_URL: ${{ vars.REPORT_URL }}
          SITE_URL:   ${{ vars.SITE_URL }}
        run: |
          set -e
          python report.py
          echo "== After generation =="
          ls -l

      - name: Prepare Pages artifact
        run: |
          set -e
          mkdir -p public
          shopt -s nullglob
          # 逐个复制产物；缺失则告警但不中断
          for f in report.pdf index.html table.csv; do
            if [ -f "$f" ]; then
              cp "$f" public/
            else
              echo "::warning file=$f::not found (will continue)"
            fi
          done
          # 若没有 index.html，做一个简单重定向到 PDF，保证站点可访问
          if [ ! -f public/index.html ] && [ -f public/report.pdf ]; then
            cat > public/index.html <<'HTML'
<!doctype html><meta charset="utf-8">
<meta http-equiv="refresh" content="0; url=./report.pdf">
<p>If you are not redirected, <a href="./report.pdf">open the PDF</a>.</p>
HTML
          fi
          echo "== public content =="
          ls -l public

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
          name: github-pages
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
